import React, { useEffect, useState } from 'react'
import axios from 'axios'
import Header from '../components/Header'
import GameCard from '../components/GameCard'
import HistoryTable from '../components/HistoryTable'
import { Coin, Shuffle, BarChart } from 'lucide-react'
const API = import.meta.env.VITE_API_URL || 'http://localhost:4000'
export default function Dashboard({ token, onLogout }) { const [balance,setBalance]=useState(0); const [history,setHistory]=useState([]); async function fetchMe(){ const r=await axios.get(API+'/api/me',{ headers: { Authorization: 'Bearer '+token } }).catch(()=>null); if(r?.data){ setBalance(r.data.balance) } } useEffect(()=>{ fetchMe() }, []); const doDeposit=async()=>{ const amt=parseInt(prompt('Valor para depositar (simulado)','100'),10); if(!amt) return; await axios.post(API + '/api/sandbox/deposit', { amount: amt }, { headers: { Authorization: 'Bearer '+token } }); await fetchMe() }; const play=async(game)=>{ const stake=parseInt(prompt('Aposta (valor em créditos)','10'),10); if(!stake) return; const r=await axios.post(API + '/api/bet', { game, stake }, { headers: { Authorization: 'Bearer '+token } }).catch(()=>null); if(r?.data){ alert('Resultado: payout=' + (r.data.payout ?? 0)); await fetchMe() } else { alert('Erro ao apostar') } } return (<div><Header onLogout={onLogout} /><div className="grid grid-cols-1 md:grid-cols-3 gap-6"><div className="md:col-span-2 space-y-6"><div className="card p-6"><div className="flex items-center justify-between"><div><div className="text-sm text-white/70">Saldo</div><div className="text-3xl font-bold">{balance}</div></div><div><button onClick={doDeposit} className="btn">Depositar (sandbox)</button></div></div><p className="text-sm text-white/60 mt-3">Use depósitos simulados para testar apostas. Não é dinheiro real.</p></div><div className="grid md:grid-cols-2 gap-4"><GameCard title="Moeda (50/50)" desc="Aposte em cara ou coroa" onPlay={()=>play('coin')}><Coin size={42} /></GameCard><GameCard title="Slot" desc="Máquina com símbolos" onPlay={()=>play('slot')}><Shuffle size={42} /></GameCard><GameCard title="Roleta" desc="Aposte em cores" onPlay={()=>play('roulette')}><BarChart size={42} /></GameCard></div><HistoryTable items={history} /></div><aside className="space-y-4"><div className="card p-4"><h4 className="font-semibold">Ajuda rápida</h4><ul className="text-sm text-white/70 mt-2 space-y-1"><li>Este é um demo apenas — sem dinheiro real.</li><li>Para produção, implemente KYC, gateways e licenças.</li><li>Transações são registradas no banco de dados do backend.</li></ul></div><div className="card p-4"><h4 className="font-semibold">Configurações</h4><p className="text-sm text-white/70 mt-2">Velocidade de animação e preferências do usuário (em breve)</p></div></aside></div></div>)}
